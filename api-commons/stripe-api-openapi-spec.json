{
  "swagger": "2.0",
  "info": {
    "title": "Stripe API",
    "description": "Stripe is a simple, developer-friendly way to accept payments online. They believe that enabling transactions on the web is a problem rooted in code, not finance, and they want to help put more websites in business.",
    "termsOfService": "https://stripe.com/terms",
    "version": "v1"
  },
  "host": "api.stripe.com",
  "basePath": "/v1/",
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "paths": {
    "/accounts/{account_id}": {
      "get": {
        "summary": "Retrieve account details",
        "description": "By default, you can see the 10 most recent bank accounts stored on a managed account directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.      ",
        "operationId": "retrieve-account",
        "parameters": [
          {
            "in": "query",
            "name": "account",
            "description": "The identifier of the account to be retrieved. If none is provided, will default to the account of the API key.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": []
      }
    },
    "/accounts/{account_id}/cards/{cart_id}": {
      "get": {
        "summary": "Retrieve a card",
        "description": "You can always see the 10 most recent cards directly on a managed account; this method lets you retrieve details about a specific card stored on the account.",
        "operationId": "account-retrieve-card",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": []
      }
    },
    "/accounts/{account_id}/external_accounts/{bank_account_aid}": {
      "delete": {
        "summary": "Delete a bank account",
        "description": "You can delete destination bank accounts from a managed account. If a bank account is the default        external account for its currency, it can only be deleted if it is the only external        account for that currency, and the currency is not the Stripe accounts default currency.        Otherwise, you must set another external account to be the default for the currency before        deleting it.      ",
        "operationId": "account-delete-bank-account",
        "parameters": [
          {
            "in": "path",
            "name": "account_id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "bank_account_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": []
      }
    },
    "/accounts/{account_id}/external_accounts/{bank_account_id}": {
      "post": {
        "summary": "Update a bank account",
        "description": "Updates the metadata of a bank account belonging to a managed account, and optionally sets it as the default for its currency.Other bank account details are not editable by design.n      ",
        "operationId": "account-update-bank-account",
        "parameters": [
          {
            "in": "path",
            "name": "account_id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "bank_account_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "default_for_currency",
            "description": "If set to true, this bank account will become the default external account for its currency.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "The ID of the bank account to be updated.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": []
      }
    },
    "/accounts/{account_id}/external_accounts/{card_id}/": {
      "delete": {
        "summary": "Delete a card",
        "description": "You can delete cards from a managed account.n      ",
        "operationId": "account-delete-card",
        "parameters": [
          {
            "in": "path",
            "name": "account_id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "card_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "The ID of the source to be deleted.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": []
      },
      "post": {
        "summary": "Update a card",
        "description": "If you need to update only some card details, like the billing address or expiration date, you can do so without having to re-enter the full card details. Stripe also works directly with card networks so that your customers can continue using your service without interruption.n      ",
        "operationId": "account-update-card",
        "parameters": [
          {
            "in": "path",
            "name": "account_id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "card_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "default_for_currency",
            "description": "Only applicable on accounts (not customers or recipients). If set to true, this card will become the default external account for its currency.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "The ID of the card to be updated.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": []
      }
    },
    "/accounts/{account_id}/external_accounts/": {
      "post": {
        "summary": "Create a bank account",
        "description": "When you create a new bank account, you must specify amanaged account to create it on.n      ",
        "operationId": "account-create-bank-account",
        "parameters": [
          {
            "in": "query",
            "name": "account_holder_name",
            "description": "The name of the person or business that owns the bank account. This field is required when attaching the bank account to a customer object.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "account_holder_type",
            "description": "The type of entity that holds the account. This can be either individual or company. This field is required when attaching the bank account to a customer object.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "account_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "account_number",
            "description": "The account number for the bank account in string form. Must be a checking account.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "country",
            "description": "The country the bank account is in.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "currency",
            "description": "The currency the bank account is in. This must be a country/currency pairing that Stripe supports.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "cvc",
            "description": "Card security code. Required unless your account is registered in Australia, Canada, or the United States. Highly recommended to always include this value.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "default_for_currency",
            "description": "If you set this to true (or if this is the first external account being added in this currency) this bank account will become the default external account for its currency.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "exp_month",
            "description": "Two digit number representing the cards expiration month.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "exp_year",
            "description": "Two or four digit number representing the cards expiration year.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to an external account object.n      It can be useful for storing additional information about the external account in a structured format.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Cardholders full name.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "number",
            "description": "The card number, as a string without any separators.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "routing_number",
            "description": "The routing number, sort code, or other country-appropriate institution number for the bank account. For US bank accounts, this is required and should be the ACH routing number, not the wire routing number. If you are providing an IBAN for account_number, this field is not required.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "source | external_account",
            "description": "When adding a bank account to a customer, the parameter name is source. When addingn      to an account, the parameter name is external_account. The value can either be a token, liken      the ones returned by Stripe.js, or a dictionary containing a useru2019sn      bank account details (with the options shown below).",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": []
      }
    },
    "/accounts/{account_id}/reject/": {
      "post": {
        "summary": "Reject an account",
        "description": "With Connect, you may flag managed accounts as suspicious.",
        "operationId": "reject-account",
        "parameters": [
          {
            "in": "query",
            "name": "account",
            "description": "The identifier of the account to be rejected.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "account_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "reason",
            "description": "The reason for rejecting the account. May be one of fraud, terms_of_service, or other.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": []
      }
    },
    "/accounts/{account_id}/": {
      "delete": {
        "summary": "Delete an account",
        "description": "With Connect, you may delete Stripe accounts you manage.",
        "operationId": "delete-account",
        "parameters": [
          {
            "in": "query",
            "name": "account",
            "description": "The identifier of the account to be deleted. If none is provided, will default to the account of the API key.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "account_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": []
      },
      "post": {
        "summary": "Update an account",
        "description": "Updates an account by setting the values of the parameters passed. Any parameters not provided will be left unchanged.      ",
        "operationId": "update-account",
        "parameters": [
          {
            "in": "query",
            "name": "account_holder_name",
            "description": "The name of the person or business that owns the bank account. This field is required when attaching the bank account to a customer object.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "account_holder_type",
            "description": "The type of entity that holds the account. This can be either individual or company. This field is required when attaching the bank account to a customer object.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "account_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "account_number",
            "description": "The account number for the bank account in string form. Must be a checking account.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "address",
            "description": "The address of this legal entity",
            "type": "string"
          },
          {
            "in": "query",
            "name": "address_kana",
            "description": "The Kana variation of the address of this legal entity (Japan only)",
            "type": "string"
          },
          {
            "in": "query",
            "name": "address_kanji",
            "description": "The Kanji variation of the address of this legal entity (Japan only)",
            "type": "string"
          },
          {
            "in": "query",
            "name": "business_name",
            "description": "The publicly sharable name for this account",
            "type": "string"
          },
          {
            "in": "query",
            "name": "business_name_kana",
            "description": "The Kana variation of the legal name of the company (Japan only)",
            "type": "string"
          },
          {
            "in": "query",
            "name": "business_name_kanji",
            "description": "The Kanji variation of the legal name of the company (Japan only)",
            "type": "string"
          },
          {
            "in": "query",
            "name": "business_primary_color",
            "description": "A CSS hex color value representing the primary branding color for this account",
            "type": "string"
          },
          {
            "in": "query",
            "name": "business_tax_id",
            "description": "The business ID number of the legal entity, if itu2019s registered as a company, as appropriate for the country itu2019s in. For example, an EIN in the US, a Business Number in Canada, a Company Number in the UK, etc.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "business_url",
            "description": "The URL that best shows the service or product provided for this account",
            "type": "string"
          },
          {
            "in": "query",
            "name": "business_vat_id",
            "description": "The VAT number of the legal entity, if itu2019s registered as a company.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "country",
            "description": "The country the bank account is in.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "currency",
            "description": "The currency the bank account is in. This must be a country/currency pairing that Stripe supports.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "cvc_failure",
            "description": "Whether or not Stripe should automatically decline charges with an incorrect CVC. This setting only applies if a card includes a CVC and the bank specifically marks it as failed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "debit_negative_balances",
            "description": "A boolean for whether or not Stripe should try to reclaim negative balances from the account holderu2019s bank account. See our managed account bank transfer guide for more information",
            "type": "string"
          },
          {
            "in": "query",
            "name": "decline_charge_on",
            "description": "Account-level settings to automatically decline certain types of charges regardless of the banku2019s decision.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "default_currency",
            "description": "Three-letter ISO currency code representing the default currency for the account. This must be a currency that Stripe supports in the accountu2019s country.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "dob",
            "description": "The date of birth of this owner. Note that if you must provide all parts of the date of birth at the same time. You cannot, for example, only provide the year without also providing month and day.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "email",
            "description": "Email address of the account holder. For standalone accounts, this is used to email them asking them to claim their Stripe account. For managed accounts, this is only to make the account easier to identify to you: Stripe will not email the account holder.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "external_account",
            "description": "A card or bank account to attach to the account. You can provide either a token, like the ones returned by Stripe.js, or a dictionary as documented in the external_account parameter for either card or bank account creation. This will create a new external account object, make it the new default external account for its currency, and delete the old default if one exists. If you want to add additional external accounts instead of replacing the existing default for this currency, use the bank account or card creation API.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "first_name",
            "description": "The first name of this owner.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "first_name_kana",
            "description": "The Kana variation of the first name of the individual responsible for the account (Japan only)",
            "type": "string"
          },
          {
            "in": "query",
            "name": "first_name_kanji",
            "description": "The Kanji variation of the first name of the individual responsible for the account (Japan only)",
            "type": "string"
          },
          {
            "in": "query",
            "name": "gender",
            "description": "The gender of the individual responsible for the account (International regulations require either u201cmaleu201d or u201cfemaleu201d)",
            "type": "string"
          },
          {
            "in": "query",
            "name": "interval",
            "description": "How frequently funds will be paid out. One of manual (for only triggered via API call), daily, weekly, or monthly. Default is daily.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ip",
            "description": "The IP address from which Stripeu2019s terms of service were agreed to by the account holder",
            "type": "string"
          },
          {
            "in": "query",
            "name": "last_name",
            "description": "The last name of this owner.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "last_name_kana",
            "description": "The Kana varation of the last name of the individual responsible for the account (Japan only)",
            "type": "string"
          },
          {
            "in": "query",
            "name": "last_name_kanji",
            "description": "The Kanji varation of the last name of the individual responsible for the account (Japan only)",
            "type": "string"
          },
          {
            "in": "query",
            "name": "legal_entity",
            "description": "Information about the holder of this account, i.e. the user receiving funds from this account",
            "type": "string"
          },
          {
            "in": "query",
            "name": "line1",
            "description": "Address line 1 (Street address/PO Box/Company name)",
            "type": "string"
          },
          {
            "in": "query",
            "name": "line2",
            "description": "Address line 2 (Apartment/Suite/Unit/Building)",
            "type": "string"
          },
          {
            "in": "query",
            "name": "maiden_name",
            "description": "The maiden name of the individual responsible for the account",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to an account object. It can be useful for storing additional information about the account in a structured format.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "month",
            "description": "The month of birth, between 1 and 12.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "monthly_anchor",
            "description": "The day of the month funds will be paid out. Required and available only if interval is monthly.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "personal_address",
            "description": "The personal address of the representative of this legal entity, used for verification",
            "type": "string"
          },
          {
            "in": "query",
            "name": "personal_address_kana",
            "description": "The Kana variation of the representative of this legal entity, used for verification (Japan only)",
            "type": "string"
          },
          {
            "in": "query",
            "name": "personal_address_kanji",
            "description": "The Kanji variation of the representative of this legal entity, used for verification (Japan only)",
            "type": "string"
          },
          {
            "in": "query",
            "name": "personal_id_number",
            "description": "The ID number of the representative, as appropriate for the legal entityu2019s country. For example, a social security number in the US, social insurance number in Canada, etc. Instead of the number itself, you can also provide a PII token provided by Stripe.js.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "phone_number",
            "description": "The phone number of the company, used for verification",
            "type": "string"
          },
          {
            "in": "query",
            "name": "postal_code",
            "description": "Zip/Postal Code",
            "type": "string"
          },
          {
            "in": "query",
            "name": "product_description",
            "description": "Internal-only description of the product being sold or service being provided by this account. Itu2019s used by Stripe for risk and underwriting purposes.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "routing_number",
            "description": "The routing number, sort code, or other country-appropriate institution number for the bank account. For US bank accounts, this is required and should be the ACH routing number, not the wire routing number. If you are providing an IBAN for account_number, this field is not required.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ssn_last_4",
            "description": "The last 4 digits of the social security number of the representative of the legal entity. Only requested in the US.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "state",
            "description": "State/Province/County",
            "type": "string"
          },
          {
            "in": "query",
            "name": "statement_descriptor",
            "description": "The text that will appear on credit card statements by default if a charge is being made directly on the account.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "support_email",
            "description": "A publicly shareable email address that can be reached for support for this account",
            "type": "string"
          },
          {
            "in": "query",
            "name": "support_phone",
            "description": "A publicly shareable phone number that can be reached for support for this account",
            "type": "string"
          },
          {
            "in": "query",
            "name": "support_url",
            "description": "A publicly shareable URL that can be reached for support for this account",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tos_acceptance",
            "description": "Details on who accepted the Stripe terms of service, and when they accepted it. See our updating managed accounts guide for more information",
            "type": "string"
          },
          {
            "in": "query",
            "name": "town",
            "description": "Town/cho-me",
            "type": "string"
          },
          {
            "in": "query",
            "name": "transfer_schedule",
            "description": "Details on when this account will make funds from charges available, and when they will be paid out to the account holderu2019s bank account. See our managed account bank transfer guide for more information",
            "type": "string"
          },
          {
            "in": "query",
            "name": "type",
            "description": "The type of the legal entity, either u201cindividualu201d or u201ccompanyu201d.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "user_agent",
            "description": "The user agent of the browser from which Stripeu2019s terms of service were agreed to by the account holder",
            "type": "string"
          },
          {
            "in": "query",
            "name": "verification",
            "description": "Information on the verification state of this owner.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "weekly_anchor",
            "description": "The day of the week funds will be paid out, of the style u2018mondayu2019, u2018tuesdayu2019, etc. Required and available only if interval is weekly.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "year",
            "description": "The 4-digit year of birth.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": []
      }
    },
    "/accounts/": {
      "get": {
        "summary": "List all connected accounts",
        "description": "Returns a list of accounts connected to your platform via Connect. If youu2019re not a platform, the list will be empty.",
        "operationId": "list-accounts",
        "parameters": [
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          ""
        ],
        "security": []
      },
      "post": {
        "summary": "Create an account",
        "description": "With Connect, you can create Stripe accounts for your users. To do this, youll first need to register your platform.n      ",
        "operationId": "create-account",
        "parameters": [
          {
            "in": "query",
            "name": "",
            "description": "See account updating for more parameters you may pass. For standalone accounts, these parameters are used to pre-fill the account application we ask the account holder to fill out. For managed accounts is the information used to identify and verify the account.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "country",
            "description": "The country the account holder resides in or that the business is legally established in. For example, if you are in the United States and the business youu2019re creating an account for is legally represented in Canada, you would use u201cCAu201d as the country for the account being created.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "email",
            "description": "The email address of the account holder. For standalone accounts, Stripe will email your user with instructions for how to set up their account. For managed accounts, this is only to make the account easier to identify to you: Stripe will never directly reach out to your users.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "managed",
            "description": "Whether youd like to create a managed or standalone account. Managed accounts have extra parameters available to them, and require that you, the platform, handle all communication with the account holder. Standalone accounts are normal Stripe accounts: Stripe will email the account holder to setup a username and password, and handle all account management directly with them.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Accounts"
        ],
        "security": []
      }
    },
    "/application_fees/{application_feed_id}/refunds/{refund_id}/": {
      "get": {
        "summary": "Retrieve an application fee refund",
        "description": "By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.      ",
        "operationId": "retrieve-fee-refund",
        "parameters": [
          {
            "in": "query",
            "name": "fee",
            "description": "ID of the application fee refunded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "ID of refund to retrieve.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Fees"
        ],
        "security": []
      }
    },
    "/application_fees/{application_feed_id}/": {
      "get": {
        "summary": "Retrieve an application fee",
        "description": "Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.",
        "operationId": "retrieve-application-fee",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "The identifier of the fee to be retrieved.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Fees"
        ],
        "security": []
      }
    },
    "/application_fees/{application_feed_id}/refunds/": {
      "get": {
        "summary": "List all application fee refunds",
        "description": "You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the limit and starting_after parameters to page through additional refunds.n      ",
        "operationId": "list-fee-refunds",
        "parameters": [
          {
            "in": "path",
            "name": "application_fee_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "The ID of the application fee whose refunds will be retrieved.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Fees"
        ],
        "security": []
      }
    },
    "/application_fees/{fee_id}/refunds/{refund_id}/": {
      "post": {
        "summary": "Update an application fee refund",
        "description": "Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.n      ",
        "operationId": "update-fee-refund",
        "parameters": [
          {
            "in": "path",
            "name": "fee_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to an application fee refund object. It can be useful for storing additional information about the refund in a structured format. You can unset individual keys if you POST an empty value for that key.  You can clear all keys if you POST an empty value for metadata.You can unset an individual key by setting its value to null and then saving.    To clear all keys, set metadata to null, then save.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "refund_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Fees"
        ],
        "security": []
      }
    },
    "/application_fees/{fee_id}/refunds/": {
      "post": {
        "summary": "Create an application fee refund",
        "description": "Refunds an application fee that has previously been collected but not yet refunded. Funds will be refunded to the Stripe account that the fee was originally collected from.n      ",
        "operationId": "create-fee-refund",
        "parameters": [
          {
            "in": "query",
            "name": "amount",
            "description": "A positive integer in cents representing how much of this fee to refund. Can only refund up to the unrefunded amount remaining of the fee.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "fee_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "The identifier of the application fee to be refunded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a refund object. It can be useful for storing additional information about the refund in a structured format. You can unset individual keys if you POST an empty value for that key.  You can clear all keys if you POST an empty value for metadata.You can unset an individual key by setting its value to null and then saving.    To clear all keys, set metadata to null, then save.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Fees"
        ],
        "security": []
      }
    },
    "/application_fees": {
      "get": {
        "summary": "List all application fees",
        "description": "Returns a list of application fees youu2019ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.",
        "operationId": "list-application-fees",
        "parameters": [
          {
            "in": "query",
            "name": "charge",
            "description": "Only return application fees for the charge specified by this charge ID.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "created",
            "description": "A filter on the list based on the object created field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "gte",
            "description": "Return values where the created field is after or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lt",
            "description": "Return values where the created field is before this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lte",
            "description": "Return values where the created field is before or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Fees"
        ],
        "security": []
      }
    },
    "/balance/history/{transaction_id}/": {
      "get": {
        "summary": "Retrieve a balance transaction",
        "description": "Retrieves the balance transaction with the given ID.",
        "operationId": "retrieve-balance-transaction",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "The ID of the desired balance transaction (as found on any API object that affects the balance, e.g. a charge or transfer).",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Balance"
        ],
        "security": []
      }
    },
    "/balance/history/": {
      "get": {
        "summary": "List all balance history",
        "description": "Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.n      ",
        "operationId": "balance-history",
        "parameters": [
          {
            "in": "query",
            "name": "available_on",
            "description": "A filter on the list based on the object available_on field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:",
            "type": "string"
          },
          {
            "in": "query",
            "name": "created",
            "description": "A filter on the list based on the object created field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "gte",
            "description": "Return values where the available_on field is after or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lt",
            "description": "Return values where the available_on field is before this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lte",
            "description": "Return values where the available_on field is before or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "source",
            "description": "Only returns the original transaction.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "transfer",
            "description": "For automatic Stripe transfers only, only returns transactions that were transferred out on the specified transfer ID.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "type",
            "description": "Only returns transactions of the given type. One of: charge, refund, adjustment, application_fee, application_fee_refund, transfer, or transfer_failure",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Balance"
        ],
        "security": []
      }
    },
    "/balance/": {
      "get": {
        "summary": "Retrieve balance",
        "description": "Retrieves the current account balance, based on the authentication that was used to make the request.",
        "operationId": "retrieve-balance",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Balance"
        ],
        "security": []
      }
    },
    "/bitcoin/receivers/{bitcoin_receiver_id}/": {
      "get": {
        "summary": "Retrieve a receiver",
        "description": "Retrieves the Bitcoin receiver with the given ID.",
        "operationId": "retrieve-bitcoin-receiver",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bitcoin receiver id.",
            "type": "string",
            "format": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Bitcoin"
        ],
        "security": []
      }
    },
    "/bitcoin/receivers/": {
      "get": {
        "summary": "List all receivers",
        "description": "Returns a list of your receivers. Receivers are returned sorted by creation date, with the most recently created receivers appearing first.",
        "operationId": "list-bitcoin-receivers",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "description": "Filter for active receivers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "filled",
            "description": "Filter for filled receivers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "uncaptured_funds",
            "description": "Filter for receivers with uncaptured funds.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Bitcoin"
        ],
        "security": []
      },
      "post": {
        "summary": "Create a receiver",
        "description": "Creates a Bitcoin receiver object that can be used to accept bitcoin payments from your customer. The receiver exposes a Bitcoin address and is created with a bitcoin to USD exchange rate that is valid for 10 minutes.",
        "operationId": "create-bitcoin-receiver",
        "parameters": [
          {
            "in": "query",
            "name": "amount",
            "description": "The amount of currency that you will be paid.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "currency",
            "description": "The currency to which the bitcoin will be converted. You will be paid out in this currency. Only USD is currently supported.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "email",
            "description": "The email address of the customer.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "refund_mispayments",
            "description": "A flag that indicates whether you would like Stripe to automatically handle refunds for any mispayments to the receiver.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Bitcoin"
        ],
        "security": []
      }
    },
    "/charges/{charge_id}/": {
      "post": {
        "summary": "Update a charge",
        "description": "Updates the specified charge by setting the values ofthe parameters passed. Any parameters not provided willbe left unchanged.n      ",
        "operationId": "update-charge",
        "parameters": [
          {
            "in": "path",
            "name": "charge_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "description",
            "description": "An arbitrary string which you can attach to a charge    object. It is displayed when in the web interface    alongside the charge. Note that if you use Stripe to send    automatic email receipts to your customers, your receipt    emails will include the description of the charge(s) that    they are describing.    This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "fraud_details",
            "description": "A set of key/value pairs you can attach to a charge giving    information about its riskiness. If you believe a charge is    fraudulent, include a user_report key with a value of    fraudulent. If you believe a charge is safe, include a    user_report key with a value of safe. Note    that you must refund a charge before setting the    user_report to fraudulent. Stripe will use    the information you send to improve our fraud detection algorithms.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a charge    object. It can be useful for storing additional information about the charge    in a structured format.    You can unset individual keys if you POST an empty value for that key.  You can clear all keys if you POST an empty value for metadata.You can unset an individual key by setting its value to null and then saving.    To clear all keys, set metadata to null, then save.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "receipt_email",
            "description": "This is the email address that the receipt for this charge will be sent to.    If this field is updated, then a new email receipt will be sent to the updated    address.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "shipping",
            "description": "Shipping information for the charge. Helps prevent fraud on charges for physical goods.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Charges"
        ],
        "security": []
      }
    },
    "/charges/{charge_id}/capture/": {
      "post": {
        "summary": "Capture a charge",
        "description": "Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you created a charge with the capture option set to false.",
        "operationId": "capture-charge",
        "parameters": [
          {
            "in": "query",
            "name": "amount",
            "description": "The amount to capture, which must be less than or equal to the original amount. Any additional amount will be automatically refunded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "application_fee",
            "description": "An application fee to add on to this charge. Can only be used with Stripe Connect.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "charge_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "receipt_email",
            "description": "The email address to send this chargeu2019s receipt to. This will override the previously-specified email address for this charge, if one was set. Receipts will not be sent in test mode.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "statement_descriptor",
            "description": "An arbitrary string to be displayed on your customeru2019s credit card statement. This may be up to 22 characters. As an example, if your website is RunClub and the item youu2019re charging for is a race ticket, you may want to specify a statement_descriptor of RunClub 5K race ticket. The statement description may not include &lt;&gt; characters, and will appear on your customeru2019s statement in capital letters. Non-ASCII characters are automatically stripped. Updating this value will overwrite the previous statement descriptor of this charge. While most banks display this information consistently, some may display it incorrectly or not at all.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Charges"
        ],
        "security": []
      }
    },
    "/charges/{charge_id}/refunds/": {
      "post": {
        "summary": "Create a refund",
        "description": "When you create a new refund, you must specify a charge to create it on.n      ",
        "operationId": "create-refund",
        "parameters": [
          {
            "in": "query",
            "name": "amount",
            "description": "A positive integer in cents representing how much of this charge to refund. Can only refund up to the unrefunded amount remaining of the charge.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "charge",
            "description": "The identifier of the charge to refund.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "charge_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a refund object. It can be useful for storing additional information about the refund in a structured format. You can unset individual keys if you POST an empty value for that key.  You can clear all keys if you POST an empty value for metadata.You can unset an individual key by setting its value to null and then saving.    To clear all keys, set metadata to null, then save.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "reason",
            "description": "String indicating the reason for the refund. If set, possible values are duplicate, fraudulent, and requested_by_customer. Specifying fraudulent as the reason when you believe the charge to be fraudulent will help us improve our fraud detection algorithms.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "refund_application_fee",
            "description": "Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Else, the application fee will be refunded with an amount proportional to the amount of the charge refunded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "reverse_transfer",
            "description": "Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed for the same amount being refunded (either the entire or partial amount).",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Charges"
        ],
        "security": []
      }
    },
    "/charges/": {
      "get": {
        "summary": "Idempotent Requests",
        "description": "The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a charge fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single charge is created.n      ",
        "operationId": "idempotent-requests",
        "parameters": [
          {
            "in": "query",
            "name": "",
            "description": "Attach your systems unique IDs to a Stripe object for easy lookups. Add your order number to a charge, your user ID to a customer or recipient, or a unique receipt number to a transfer, for example.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Charges"
        ],
        "security": []
      },
      "post": {
        "summary": "Create a charge",
        "description": "To charge a credit card, you create a charge object. If your API key is in test mode, the supplied payment source (e.g., card or Bitcoin receiver) wont actually be charged, though everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).n      ",
        "operationId": "create-charge",
        "parameters": [
          {
            "in": "query",
            "name": "amount",
            "description": "A positive integer in the smallest currency unit (e.g., 100 cents to charge $1.00 or 1 to charge u00a51, a 0-decimal currency) representing how much to charge the card. The minimum amount is $0.50 US or equivalent in charge currency.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "application_fee",
            "description": "A fee in cents that will be applied to the charge and transferred to the application owners Stripe account. To use an application fee, the request must be made on behalf of another account, using the Stripe-Account header, an OAuth key, or the destination parameter. For more information, see the application fees documentation.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "capture",
            "description": "Whether or not to immediately capture the charge. When false, the charge issues an authorization (or pre-authorization), and will need to be captured later. Uncaptured charges expire in 7 days. For more information, see authorizing charges and settling later.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "currency",
            "description": "3-letter ISO code for currency.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "customer",
            "description": "The ID of an existing customer that will be charged in this request.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "cvc",
            "description": "Card security code. Required unless your account is registered in Australia, Canada, or the United States. Highly recommended to always include this value.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "description",
            "description": "An arbitrary string which you can attach to a charge object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the description of the charge(s) that they are describing.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "destination",
            "description": "An account to make the charge on behalf of. If specified, the charge will be attributed to the destination account for tax reporting, and the funds from the charge will be transferred to the destination account. The ID of the resulting transfer will be returned in the transfer field of the response. See the documentation for details.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "exp_year",
            "description": "Two or four digit number representing the cards expiration year.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a charge object. It can be useful for storing additional information about the customer in a structured format. Its often a good idea to store an email address in metadata for tracking later.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Cardholders full name.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "number",
            "description": "The card number, as a string without any separators.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "object",
            "description": "The type of payment source. Should be card.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "receipt_email",
            "description": "The email address to send this charges receipt to. The receipt will not be sent until the charge is paid. If this charge is for a customer, the email address specified here will override the customers email address. Receipts will not be sent for test mode charges. If receipt_email is specified for a charge in live mode, a receipt will be sent regardless of your email settings.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "shipping",
            "description": "Shipping information for the charge. Helps prevent fraud on charges for physical goods. For more information, see the Charge object documentation.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "source",
            "description": "A payment source to be charged, such as a credit card. If you also pass a customer ID, the source must be the ID of a source belonging to the customer. Otherwise, if you do not pass a customer ID, the source you provide must either be a token, like the ones returned by Stripe.js, or a dictionary containing a users credit card details, with the options described below. Although not all information is required, the extra info helps prevent fraud.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "statement_descriptor",
            "description": "An arbitrary string to be displayed on your customers credit card statement. This may be up to 22 characters. As an example, if your website is RunClub and the item youre charging for is a race ticket, you may want to specify a statement_descriptor of RunClub 5K race ticket. The statement description may not include &lt;&gt;&quot;&apos; characters, and will appear on your customers statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Charges"
        ],
        "security": []
      }
    },
    "/country_specs/US/": {
      "get": {
        "summary": "Retrieve a Country Spec",
        "description": "Returns a Country Spec for a given Country code.",
        "operationId": "retrieve-country-spec",
        "parameters": [
          {
            "in": "query",
            "name": "country",
            "description": "An ISO country code. Available country codes can be listed with the List Country Specs endpoint.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Country"
        ],
        "security": []
      }
    },
    "/country_specs/": {
      "get": {
        "summary": "List Country Specs",
        "description": "Lists all Country Spec objects available in the API.",
        "operationId": "list-country-specs",
        "parameters": [
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Country"
        ],
        "security": []
      }
    },
    "/coupons/{coupon_id}/": {
      "delete": {
        "summary": "Delete a coupon",
        "description": "You can delete coupons via the coupon management page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers canu2019t redeem the coupon. You can also delete coupons via the API.",
        "operationId": "delete-coupon",
        "parameters": [
          {
            "in": "query",
            "name": "coupon",
            "description": "The identifier of the coupon to be deleted.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "coupon_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Coupons"
        ],
        "security": []
      },
      "post": {
        "summary": "Update a coupon",
        "description": "Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.n      ",
        "operationId": "update-coupon",
        "parameters": [
          {
            "in": "path",
            "name": "coupon_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "The identifier of the coupon to be updated.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a coupon object. It can be useful for storing additional information about the coupon in a structured format.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Coupons"
        ],
        "security": []
      }
    },
    "/coupons/": {
      "get": {
        "summary": "List all coupons",
        "description": "Returns a list of your coupons.",
        "operationId": "list-coupons",
        "parameters": [
          {
            "in": "query",
            "name": "created",
            "description": "A filter on the list based on the object created field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "gte",
            "description": "Return values where the created field is after or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lt",
            "description": "Return values where the created field is before this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lte",
            "description": "Return values where the created field is before or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Coupons"
        ],
        "security": []
      },
      "post": {
        "summary": "Create a coupon",
        "description": "You can create coupons easily via the coupon management page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.",
        "operationId": "create-coupon",
        "parameters": [
          {
            "in": "query",
            "name": "amount_off",
            "description": "A positive integer representing the amount to subtract from an invoice total (required if percent_off is not passed)",
            "type": "string"
          },
          {
            "in": "query",
            "name": "currency",
            "description": "Currency of the amount_off parameter (required if amount_off is passed)",
            "type": "string"
          },
          {
            "in": "query",
            "name": "duration",
            "description": "Specifies how long the discount will be in effect. Can be forever, once, or repeating.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "duration_in_months",
            "description": "Required only if duration is repeating, in which case it must be a positive integer that specifies the number of months the discount will be in effect.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "Unique string of your choice that will be used to identify this coupon when applying it to a customer. This is often a specific code youu2019ll give to your customer to use when signing up (e.g. FALL25OFF). If you donu2019t want to specify a particular code, you can leave the ID blank and weu2019ll generate a random code for you.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "max_redemptions",
            "description": "A positive integer specifying the number of times the coupon can be redeemed before itu2019s no longer valid.  For example, you might have a 50% off coupon that the first 20 readers of your blog can use.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a coupon object. It can be useful for storing additional information about the coupon in a structured format.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "percent_off",
            "description": "A positive integer between 1 and 100 that represents the discount the coupon will apply (required if amount_off is not passed)",
            "type": "string"
          },
          {
            "in": "query",
            "name": "redeem_by",
            "description": "Unix timestamp specifying the last time at which the coupon can be redeemed.  After the redeem_by date, the coupon can no longer be applied to new customers.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Coupons"
        ],
        "security": []
      }
    },
    "/customers/{customer_id}/sources/{bank_id}/": {
      "get": {
        "summary": "Retrieve a bank account",
        "description": "By default, you can see the 10 most recent bank accounts stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.n      ",
        "operationId": "customer-retrieve-bank-account",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "ID of bank account to retrieve",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Customers"
        ],
        "security": []
      }
    },
    "/customers/{customer_id}/subscriptions/{subscription_id}/": {
      "delete": {
        "summary": "Cancel a subscription",
        "description": "Cancels a customeru2019s subscription. If you set the at_period_end parameter to true, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. By default, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription. Note, however, that any pending invoice items that youu2019ve created will still be charged for at the end of the period unless manually deleted. If youu2019ve set the subscription to cancel at period end, any pending prorations will also be left in place and collected at the end of the period, but if the subscription is set to cancel immediately, pending prorations will be removed.",
        "operationId": "cancel-subscription",
        "parameters": [
          {
            "in": "query",
            "name": "at_period_end",
            "description": "A flag that if set to true will delay the cancellation of the subscription until the end of the current period.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "customer_id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscription_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Customers"
        ],
        "security": []
      },
      "post": {
        "summary": "Update a subscription",
        "description": "Updates an existing subscription on a customer to match the specified parameters.When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes.To preview how the proration will be calculated, use the upcoming invoice endpoint.n      ",
        "operationId": "update-subscription",
        "parameters": [
          {
            "in": "query",
            "name": "application_fee_percent",
            "description": "A positive decimal (with at most two decimal places) between 1 and 100 that represents the percentage of the subscription invoice amount due each billing period (including any bundled invoice items) that will be transferred to the application owneru2019s Stripe account. The request must be made with an OAuth key in order to set an application fee percentage . For more information, see the application fees documentation.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "coupon",
            "description": "The code of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "customer_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "cvc",
            "description": "Card security code. Required unless your account is registered in Australia, Canada, or the United States. Highly recommended to always include this value.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "exp_month",
            "description": "Two digit number representing the cards expiration month.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "exp_year",
            "description": "Two or four digit number representing the cards expiration year.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a subscription object. It can be useful for storing additional information about the subscription in a structured format.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Cardholders full name.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "number",
            "description": "The card number, as a string without any separators.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "plan",
            "description": "The identifier of the plan to update the subscription to. If omitted, the subscription will not change plans.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "prorate",
            "description": "Flag telling us whether to prorate switching plans during a billing cycle.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "proration_date",
            "description": "If set, the proration will be calculated as though the subscription was updated at the given time.    This can be used to apply exactly the same proration that was previewed with    upcoming invoice endpoint.    It can also be used to implement custom proration logic, such as prorating by day instead of by second,    by providing the time that you wish to use for proration calculations.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "quantity",
            "description": "The quantity of the plan to which the customer should be subscribed. For example, if your plan is $10/user/month, and your customer has 5 users, you could pass 5 as the quantity to have the customer charged $50 (5 x $10) monthly. If you update a subscription but dont change the plan ID (e.g. changing only the trial_end), the subscription will inherit the old subscriptions quantity attribute unless you pass a new quantity parameter.  If you update a subscription and change the plan ID, the new subscription will not inherit the quantity attribute and will default to 1 unless you pass a quantity parameter.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "source",
            "description": "The source can either be a token, like the ones returned by our Stripe.js, or a dictionary containing a users credit card details (with the options shown below). You must provide a source if the customer does not already have a valid source attached, and you are subscribing the customer for a plan that is not free. Passing source will create a new source object, make it the customer default source, and delete the old customer default if one exists. If you want to add an additional source to use with subscriptions, instead use the card creation API to add the card and then the customer update API to set it as the default. Whenever you attach a card to a customer, Stripe will automatically validate the card.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscription_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tax_percent",
            "description": "Update the amount of tax applied to this subscription. Changing the tax_percent of a subscription will only affect future invoices.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "trial_end",
            "description": "Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value now can be provided to end the customers trial immediately.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Customers"
        ],
        "security": []
      }
    },
    "/customers/{customer_id}/": {
      "delete": {
        "summary": "Delete a customer",
        "description": "Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.",
        "operationId": "delete-customer",
        "parameters": [
          {
            "in": "query",
            "name": "customer",
            "description": "The identifier of the customer to be deleted",
            "type": "string"
          },
          {
            "in": "path",
            "name": "customer_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Customers"
        ],
        "security": []
      },
      "post": {
        "summary": "Update a customer",
        "description": "n      Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.  For example, if you pass the source parameter, that becomes the customers active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid source: for each of the customers current subscriptions, if the subscription is in the past_due state, then the latest unpaid, unclosed invoice for the subscription will be retried (note that this retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice). (Note also that no invoices pertaining to subscriptions in the unpaid state, or invoices pertaining to canceled subscriptions, will be retried as a result of updating the customers source.)n      ",
        "operationId": "update-customer",
        "parameters": [
          {
            "in": "query",
            "name": "account_balance",
            "description": "An integer amount in cents that represents the  account balance for your customer. Account balances only affect invoices. A negative amount represents  a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "business_vat_id",
            "description": "The customeru2019s VAT identification number.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "coupon",
            "description": "If you provide a coupon code, the customer will have an      discount applied on all recurring charges.  Chargesn      you create through the API will not have the discount.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "currency",
            "description": "Required when adding a card to an account (not applicable to a customers or recipients). The card (which must be a debit card) can be used as a transfer destination for funds in this currency. Currently, the only supported currency for debit card transfers is usd.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "customer_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "cvc",
            "description": "Card security code. Required unless your account is registered in Australia, Canada, or the United States. Highly recommended to always include this value.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "default_for_currency",
            "description": "Only applicable on accounts (not customers or recipients). If you set this to true (or if this is the first external account being added in this currency) this card will become the default external account for its currency.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "default_source",
            "description": "ID of source to make the customeru2019s new default for invoice payments",
            "type": "string"
          },
          {
            "in": "query",
            "name": "description",
            "description": "An arbitrary string that you can attach to a customern      object. It is displayed alongside the customer in the dashboard.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "email",
            "description": "Customeru2019s email address.n      Itu2019s displayed alongside the customer in your dashboard and can be usefuln      for searching and tracking.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "exp_month",
            "description": "Two digit number representing the cards expiration month.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "exp_year",
            "description": "Two or four digit number representing the cards expiration year.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a customern      object. It can be useful for storing additional information about the customern      in a structured format.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Cardholders full name.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "number",
            "description": "The card number, as a string without any separators.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "source",
            "description": "The source can either be a token, like the ones returned by ourn      Stripe.js, or a dictionary containing a useru2019s credit cardn      details (with the options shown below). Passing source will create a new source object,n      make it the new customer default source, and delete the old customer default if one exists.n      If you want to add additional sources instead of replacing the existing default,n      use the card creation API. Whenever you attach a card to a customer,n      Stripe will automatically validate the card.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Customers"
        ],
        "security": []
      }
    },
    "/customers/{customer_id}/discount/": {
      "delete": {
        "summary": "Delete a customer discount",
        "description": "Removes the currently applied discount on a customer.",
        "operationId": "delete-discount",
        "parameters": [
          {
            "in": "path",
            "name": "customer_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Customers"
        ],
        "security": []
      }
    },
    "/customers/{customer_id}/sources/{bank_account_id}/": {
      "delete": {
        "summary": "Delete a bank account",
        "description": "You can delete bank accounts from a Customer.n      ",
        "operationId": "customer-delete-bank-account",
        "parameters": [
          {
            "in": "path",
            "name": "bank_account_id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "customer_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "The ID of the source to be deleted.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Customers"
        ],
        "security": []
      },
      "post": {
        "summary": "Update a bank account",
        "description": "Updates the metadata, account_holder_name, and account_holder_type of a bank account belonging to a Customer.Other bank account details are not editable by design.n      ",
        "operationId": "customer-update-bank-account",
        "parameters": [
          {
            "in": "query",
            "name": "account_holder_name",
            "description": "The name of the person or business that owns the bank account.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "account_holder_type",
            "description": "The type of entity that holds the account. This can be either individual or company.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "bank_account_id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "customer_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "The ID of the bank account to be updated.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Customers"
        ],
        "security": []
      }
    },
    "/customers/{customer_id}/sources/{card_id}/": {
      "delete": {
        "summary": "Delete a card",
        "description": "You can delete cards from a customer or recipient.n      ",
        "operationId": "delete-card",
        "parameters": [
          {
            "in": "path",
            "name": "card_id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "customer_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Customers"
        ],
        "security": []
      },
      "get": {
        "summary": "Retrieve a card",
        "description": "You can always see the 10 most recent cards directly on a customer or recipient; this method lets you retrieve details about a specific card stored on the customer or recipient.n      ",
        "operationId": "retrieve-card",
        "parameters": [
          {
            "in": "path",
            "name": "card_id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "customer_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "The ID of the card to be retrieved.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Customers"
        ],
        "security": []
      },
      "post": {
        "summary": "Update a card",
        "description": "If you need to update only some card details, like the billing address or expiration date, you can do so without having to re-enter the full card details. Stripe also works directly with card networks so that your customers can continue using your service without interruption.n      ",
        "operationId": "update-card",
        "parameters": [
          {
            "in": "path",
            "name": "card_id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "customer_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "default_for_currency",
            "description": "Only applicable on accounts (not customers or recipients). If set to true, this card will become the default external account for its currency.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "The ID of the card to be updated.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Customers"
        ],
        "security": []
      }
    },
    "/customers/{customer_id}/sources/": {
      "post": {
        "summary": "Create a bank account",
        "description": "When you create a new bank account, you must specify a Customer to create it on.n      ",
        "operationId": "customer-create-bank-account",
        "parameters": [
          {
            "in": "query",
            "name": "currency",
            "description": "Required when adding a card to an account (not applicable to a customers or recipients). The card (which must be a debit card) can be used as a transfer destination for funds in this currency. Currently, the only supported currency for debit card transfers is usd.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "customer_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "cvc",
            "description": "Card security code. Required unless your account is registered in Australia, Canada, or the United States. Highly recommended to always include this value.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "default_for_currency",
            "description": "Only applicable on accounts (not customers or recipients). If you set this to true (or if this is the first external account being added in this currency) this card will become the default external account for its currency.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "exp_month",
            "description": "Two digit number representing the cards expiration month.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "exp_year",
            "description": "Two or four digit number representing the cards expiration year.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a card object. It can be useful for storing additional information about the card in a structured format.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Cardholders full name.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "number",
            "description": "The card number, as a string without any separators.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "source | external_account",
            "description": "When adding a card to a customer, the parameter name is source. When addingn      to an account, the parameter name is external_account. The value can either be a token, liken      the ones returned by our Stripe.js, or a dictionary containing a useru2019sn      credit card details (with the options shown below). Stripe will automatically validate then      card.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Customers"
        ],
        "security": []
      }
    },
    "/customers/{customer_id}/subscriptions/{subscription_id}/discount/": {
      "delete": {
        "summary": "Delete a subscription discount",
        "description": "Removes the currently applied discount on a subscription.",
        "operationId": "delete-subscription-discount",
        "parameters": [
          {
            "in": "path",
            "name": "customer_id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscription_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Customers"
        ],
        "security": []
      }
    },
    "/customers/{customer_id}/subscriptions/": {
      "get": {
        "summary": "List active subscriptions",
        "description": "You can see a list of the customers active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.n      ",
        "operationId": "list-subscriptions",
        "parameters": [
          {
            "in": "query",
            "name": "customer",
            "description": "The ID of the customer whose subscriptions will be retrieved",
            "type": "string"
          },
          {
            "in": "path",
            "name": "customer_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Customers"
        ],
        "security": []
      },
      "post": {
        "summary": "Create a subscription",
        "description": "Creates a new subscription on an existing customer.n      ",
        "operationId": "create-subscription",
        "parameters": [
          {
            "in": "query",
            "name": "application_fee_percent",
            "description": "A positive decimal (with at most two decimal places) between 1 and 100. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owneru2019s Stripe account. The request must be made with an OAuth key in order to set an application fee percentage. For more information, see the application fees documentation.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "coupon",
            "description": "The code of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "customer_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "cvc",
            "description": "Card security code. Required unless your account is registered in Australia, Canada, or the United States. Highly recommended to always include this value.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "exp_year",
            "description": "Two or four digit number representing the cards expiration year.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a subscription object. It can be useful for storing additional information about the subscription in a structured format.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Cardholders full name.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "number",
            "description": "The card number, as a string without any separators.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "object",
            "description": "The type of payment source. Should be card.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "plan",
            "description": "The identifier of the plan to subscribe the customer to.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "quantity",
            "description": "The quantity of the plan to which the customer should be subscribed. For example, if your plan is $10/user/month, and your customer has 5 users, you could pass 5 as the quantity to have the customer charged $50 (5 x $10) monthly.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "source",
            "description": "The source can either be a token, like the ones returned by our Stripe.js, or a dictionary containing a users credit card details (with the options shown below). You must provide a source if the customer does not already have a valid source attached, and you are subscribing the customer for a plan that is not free. Passing source will create a new source object, make it the customer default source, and delete the old customer default if one exists. If you want to add an additional source to use with subscriptions, instead use the card creation API to add the card and then the customer update API to set it as the default. Whenever you attach a card to a customer, Stripe will automatically validate the card.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tax_percent",
            "description": "A positive decimal (with at most two decimal places) between 1 and 100. This represents the percentage of the subscription invoice subtotal that will be calculated and added as tax to the final amount each billing period. For example, a plan which charges $10/month with a tax_percent of 20.0 will charge $12 per invoice.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "trial_end",
            "description": "Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value now can be provided to end the customers trial immediately.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Customers"
        ],
        "security": []
      }
    },
    "/customers/": {
      "get": {
        "summary": "List all customers",
        "description": "Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.",
        "operationId": "list-customers",
        "parameters": [
          {
            "in": "query",
            "name": "created",
            "description": "A filter on the list based on the object created field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "gte",
            "description": "Return values where the created field is after or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lt",
            "description": "Return values where the created field is before this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lte",
            "description": "Return values where the created field is before or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Customers"
        ],
        "security": []
      },
      "post": {
        "summary": "Create a customer",
        "description": "Creates a new customer object.",
        "operationId": "create-customer",
        "parameters": [
          {
            "in": "query",
            "name": "account_balance",
            "description": "An integer amount in cents that is the  starting account balance for your customer.  A negative amount represents  a credit that will be used before attempting any charges to the customeru2019s  card; a positive amount will be added to the next invoice.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "business_vat_id",
            "description": "The customeru2019s VAT identification number.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "coupon",
            "description": "If you provide a coupon code, the customer will have a  discount applied on all recurring charges.  Charges  you create through the API will not have the discount.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "currency",
            "description": "Required when adding a card to an account (not applicable to a customers or recipients). The card (which must be a debit card) can be used as a transfer destination for funds in this currency. Currently, the only supported currency for debit card transfers is usd.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "cvc",
            "description": "Card security code. Required unless your account is registered in Australia, Canada, or the United States. Highly recommended to always include this value.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "default_for_currency",
            "description": "Only applicable on accounts (not customers or recipients). If you set this to true (or if this is the first external account being added in this currency) this card will become the default external account for its currency.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "description",
            "description": "An arbitrary string that you can attach to a customer  object. It is displayed alongside the customer in the dashboard.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "email",
            "description": "Customeru2019s email address. Itu2019s displayed alongside the customer in your dashboard and can be useful for searching and tracking.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "exp_month",
            "description": "Two digit number representing the cards expiration month.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "exp_year",
            "description": "Two or four digit number representing the cards expiration year.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a customern      object. It can be useful for storing additional information about the customern      in a structured format.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Cardholders full name.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "number",
            "description": "The card number, as a string without any separators.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "plan",
            "description": "The identifier of the plan to subscribe the customer      to.  If provided, the returned customer object will have a      list of subscriptions that the customer is currently subscribed      to. If you subscribe a customer to a plan without a free trial,      the customer must have a valid card as well.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "quantity",
            "description": "The quantity youu2019d like to apply to the subscription youu2019re creating (if you pass in a plan).  For example, if your plan is 10 cents/user/month,  and your customer has 5 users, you could pass 5 as the quantity to have the  customer charged 50 cents (5 x 10 cents) monthly. Defaults to 1 if not set. Only applies when the plan parameter is also provided.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "source",
            "description": "The source can either be a token, like the ones returned by ourn      Stripe.js, or a dictionary containing a useru2019s credit cardn      details (with the options shown below).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tax_percent",
            "description": "A positive decimal (with at most two decimal places) between 1 and 100. This represents the percentage of the subscription invoice subtotal that will be calculated and added as tax to the final amount each billing period. For example, a plan which charges $10/month with a tax_percent of 20.0 will charge $12 per invoice. Can only be used if a plan is provided.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "trial_end",
            "description": "Unix timestamp representing the end of the trial period  the customer will get before being charged.  If set, trial_end will override the default trial period of the  plan the customer is being subscribed to.  The special value now can be provided to end the  customeru2019s trial immediately. Only applies when the plan parameter is also provided.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Customers"
        ],
        "security": []
      }
    },
    "/disputes/{dispute_id}/": {
      "post": {
        "summary": "Update a dispute",
        "description": "When you get a dispute, contacting your customer is always the best first step. If that doesnu2019t work, you can submit evidence in order to help us resolve the dispute in your favor. You can do this in your dashboard, but if you prefer, you can use the API to submit evidence programmatically.",
        "operationId": "update-dispute",
        "parameters": [
          {
            "in": "query",
            "name": "dispute",
            "description": "ID of the dispute to update.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "dispute_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "evidence",
            "description": "Evidence to upload to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a disputen    object. It can be useful for storing additional information about the disputen    in a structured format.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Disputes"
        ],
        "security": []
      }
    },
    "/disputes/{dispute_id}/close/": {
      "post": {
        "summary": "Close a dispute",
        "description": "Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially u2018dismissingu2019 the dispute, acknowledging it as lost",
        "operationId": "close-dispute",
        "parameters": [
          {
            "in": "query",
            "name": "dispute",
            "description": "ID of dispute to close.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "dispute_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Disputes"
        ],
        "security": []
      }
    },
    "/disputes/": {
      "get": {
        "summary": "List all disputes",
        "description": "Returns a list of your disputes.",
        "operationId": "list-disputes",
        "parameters": [
          {
            "in": "query",
            "name": "created",
            "description": "A filter on the list based on the object created field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "gte",
            "description": "Return values where the created field is after or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lt",
            "description": "Return values where the created field is before this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lte",
            "description": "Return values where the created field is before or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Disputes"
        ],
        "security": []
      }
    },
    "/events/{event_id}/": {
      "get": {
        "summary": "Retrieve an event",
        "description": "Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.",
        "operationId": "retrieve-event",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "The identifier of the event to be retrieved.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Events"
        ],
        "security": []
      }
    },
    "/events/": {
      "get": {
        "summary": "List all events",
        "description": "List events, going back up to 30 days.",
        "operationId": "list-events",
        "parameters": [
          {
            "in": "query",
            "name": "created",
            "description": "A filter on the list based on the object created field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "gte",
            "description": "Return values where the created field is after or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lt",
            "description": "Return values where the created field is before this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lte",
            "description": "Return values where the created field is before or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "type",
            "description": "A string containing a specific event name, or group of events using * as a wildcard. The list will be filtered to include only events with a matching event property",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Events"
        ],
        "security": []
      }
    },
    "/invoiceitems/{invoice_id}/": {
      "get": {
        "summary": "Retrieve an invoice item",
        "description": "Retrieves the invoice item with the given ID.",
        "operationId": "retrieve-invoiceitem",
        "parameters": [
          {
            "in": "query",
            "name": "invoiceitem",
            "description": "The ID of the desired invoice item.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Invoices"
        ],
        "security": []
      }
    },
    "/invoiceitems/{invoiceitem_id}/": {
      "delete": {
        "summary": "Delete an invoice item",
        "description": "Removes an invoice item from the upcoming invoice. Removing an invoice item is only possible before the invoice itu2019s attached to is closed.",
        "operationId": "delete-invoiceitem",
        "parameters": [
          {
            "in": "query",
            "name": "invoiceitem",
            "description": "The identifier of the invoice item to be deleted.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "invoiceitem_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Invoices"
        ],
        "security": []
      },
      "post": {
        "summary": "Update an invoice item",
        "description": "Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice its attached to is closed.n      ",
        "operationId": "update-invoiceitem",
        "parameters": [
          {
            "in": "query",
            "name": "amount",
            "description": "The integer amount in cents of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customers account, pass a negative amount.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "description",
            "description": "An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking. This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "discountable",
            "description": "Controls whether discounts apply to this invoice item.    Defaults to false for prorations or negative invoice items, and true for all other invoice items.    Cannot be set to true for prorations.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "invoiceitem_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to an invoice item object. It can be useful for storing additional information about the invoice item in a structured format. You can unset individual keys if you POST an empty value for that key.  You can clear all keys if you POST an empty value for metadata.You can unset an individual key by setting its value to null and then saving.    To clear all keys, set metadata to null, then save.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Invoices"
        ],
        "security": []
      }
    },
    "/invoiceitems/": {
      "get": {
        "summary": "List all invoice items",
        "description": "Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.",
        "operationId": "list-invoiceitems",
        "parameters": [
          {
            "in": "query",
            "name": "created",
            "description": "A filter on the list based on the object created field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:",
            "type": "string"
          },
          {
            "in": "query",
            "name": "customer",
            "description": "The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "gte",
            "description": "Return values where the created field is after or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lt",
            "description": "Return values where the created field is before this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lte",
            "description": "Return values where the created field is before or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Invoices"
        ],
        "security": []
      },
      "post": {
        "summary": "Create an invoice item",
        "description": "Adds an arbitrary charge or credit to the customeru2019s upcoming invoice.",
        "operationId": "create-invoiceitem",
        "parameters": [
          {
            "in": "query",
            "name": "amount",
            "description": "The integer amount in cents of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customeru2019s account, pass a negative amount.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "currency",
            "description": "3-letter ISO code for currency.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "customer",
            "description": "The ID of the customer who will be billed when this invoice item is billed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "description",
            "description": "An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "discountable",
            "description": "Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "invoice",
            "description": "The ID of an existing invoice to add this invoice item to. When left blank, the invoice item will be added to the next upcoming scheduled invoice. Use this when adding invoice items in response to an invoice.created webhook. You cannot add an invoice item to an invoice that has already been paid, attempted or closed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to an invoice item object. It can be useful for storing additional information about the invoice item in a structured format.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "subscription",
            "description": "The ID of a subscription to add this invoice item to. When left blank, the invoice item will be be added to the next upcoming scheduled invoice. When set, scheduled invoices for subscriptions other than the specified subscription will ignore the invoice item. Use this when you want to express that an invoice item has been accrued within the context of a particular subscription.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Invoices"
        ],
        "security": []
      }
    },
    "/invoices/{invoice_id}/": {
      "post": {
        "summary": "Update an invoice",
        "description": "Until an invoice is paid, it is marked as open (closed=false). If youd like to stop Stripe from automatically attempting payment on an invoice or would simply like to close the invoice out as no longer owed by the customer, you can update the closed parameter.n      ",
        "operationId": "update-invoice",
        "parameters": [
          {
            "in": "query",
            "name": "application_fee",
            "description": "A fee in cents that will be applied to the invoice and transferred to the application owneru2019s Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees documentation.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "closed",
            "description": "Boolean representing whether an invoice is closed or not.  To close an invoice, pass true.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "forgiven",
            "description": "Boolean representing whether an invoice is forgiven or not.  To forgive an invoice, pass true.  Forgiving an invoice instructs us to update the subscription status as if the invoice were successfully paid. Once an invoice has been forgiven, it cannot be unforgiven or reopened.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "invoice_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "statement_descriptor",
            "description": "Extra information about a charge for the customeru2019s credit card statement.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tax_percent",
            "description": "The percent tax rate applied to the invoice, represented as a decimal number. The tax rate of a paid or forgiven invoice cannot be changed.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Invoices"
        ],
        "security": []
      }
    },
    "/invoices/upcoming/": {
      "get": {
        "summary": "Retrieve an upcoming invoice",
        "description": "At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discount that is applicable to the customer.",
        "operationId": "upcoming-invoice",
        "parameters": [
          {
            "in": "query",
            "name": "coupon",
            "description": "The code of the coupon to apply. If a subscription or subscription_plan is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customeru2019s subscriptions.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "customer",
            "description": "The identifier of the customer whose upcoming invoice youu2019d like to retrieve.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "subscription",
            "description": "The identifier of the subscription for which youu2019d like to retrieve the upcoming invoice. If not provided, but a subscription_plan is provided, you will preview creating a subscription to that plan. If neither subscription nor subscription_plan is provided, you will retrieve the next upcoming invoice from among the customeru2019s subscriptions.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "subscription_plan",
            "description": "If set, the invoice returned will preview updating the subscription given to this plan, or creating a new subscription to this plan if no subscription is given.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "subscription_prorate",
            "description": "If previewing an update to a subscription, this decides whether the preview will show the result of applying prorations or not. If set, one of subscription_plan or subscription, and one of subscription_plan, subscription_quantity or subscription_trial_end are required.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "subscription_proration_date",
            "description": "If previewing an update to a subscription, and doing proration, subscription_proration_date forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan.If set, subscription, and one of subscription_plan, subscription_quantity or subscription_trial_end are required. Also, subscription_proration cannot be set to false.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "subscription_quantity",
            "description": "If provided, the invoice returned will preview updating or creating a subscription with that quantity. If set, one of subscription_plan or subscription is required.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "subscription_trial_end",
            "description": "If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of subscription_plan or subscription is required.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Invoices"
        ],
        "security": []
      }
    },
    "/invoices/{invoice_id}/lines/": {
      "get": {
        "summary": "Retrieve an invoices line items",
        "description": "When retrieving an invoice, youll get a lines property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.n      ",
        "operationId": "invoice-lines",
        "parameters": [
          {
            "in": "query",
            "name": "customer",
            "description": "In the case of upcoming invoices, the customer of the upcoming invoice is required. In other cases it is ignored.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "invoice",
            "description": "The id of the invoice containing the lines to be retrieved",
            "type": "string"
          },
          {
            "in": "path",
            "name": "invoice_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The maximum number of line items to return",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "subscription",
            "description": "In the case of upcoming invoices, the subscription of the upcoming invoice is optional. In other cases it is ignored.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Invoices"
        ],
        "security": []
      }
    },
    "/invoices/{invoice_id}/pay/": {
      "post": {
        "summary": "Pay an invoice",
        "description": "Stripe automatically creates and then attempts to pay invoices for customers on subscriptions. Weu2019ll also retry unpaid invoices according to your retry settings. However, if youu2019d like to attempt to collect payment on an invoice out of the normal retry schedule or for some other reason, you can do so.",
        "operationId": "pay-invoice",
        "parameters": [
          {
            "in": "query",
            "name": "invoice",
            "description": "ID of invoice to pay.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "invoice_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "v"
        ],
        "security": []
      }
    },
    "/invoices/": {
      "get": {
        "summary": "List all invoices",
        "description": "You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.",
        "operationId": "list-invoices",
        "parameters": [
          {
            "in": "query",
            "name": "customer",
            "description": "The identifier of the customer whose invoices to return. If none is provided, all invoices will be returned.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "date",
            "description": "A filter on the list based on the object date field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "gte",
            "description": "Return values where the date field is after or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lt",
            "description": "Return values where the date field is before this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lte",
            "description": "Return values where the date field is before or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Invoices"
        ],
        "security": []
      },
      "post": {
        "summary": "Create an invoice",
        "description": "If you need to invoice your customer outside the regular billing cycle, you can create an invoice that pulls in all pending invoice items, including prorations. The customeru2019s billing cycle and regular subscription wonu2019t be affected.",
        "operationId": "create-invoice",
        "parameters": [
          {
            "in": "query",
            "name": "application_fee",
            "description": "A fee in cents that will be applied to the invoice and transferred to the application owneru2019s Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees documentation.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "statement_descriptor",
            "description": "Extra information about a charge for the customeru2019s credit card statement.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "subscription",
            "description": "The ID of the subscription to invoice.  If not set, the created invoice will include all pending invoice items for the customer.  If set, the created invoice will exclude pending invoice items that pertain to other subscriptions.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tax_percent",
            "description": "The percent tax rate applied to the invoice, represented as a decimal number.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Invoices"
        ],
        "security": []
      }
    },
    "/orders/{order_id}/": {
      "post": {
        "summary": "Update an order",
        "description": "Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata, and status as arguments.n      ",
        "operationId": "update-order",
        "parameters": [
          {
            "in": "query",
            "name": "coupon",
            "description": "A coupon code that represents a discount to be applied to this order. Must be one-time duration and in same currency as the order.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the order in a structured format.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "order_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "selected_shipping_method",
            "description": "The shipping method to select for fulfilling this order.  If specified, must be one of the ids of a shipping method in the shipping_methods array.  If specified, will overwrite the existing selected shipping method, updating items as necessary.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "status",
            "description": "Current order status. One of created, paid, canceled, fulfilled, or returned. More detail in the Relay API Overview.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Orders"
        ],
        "security": []
      }
    },
    "/orders/{order_id}/pay/": {
      "post": {
        "summary": "Pay an order",
        "description": "Pay an order by providing a source to create a payment.n      ",
        "operationId": "pay-order",
        "parameters": [
          {
            "in": "query",
            "name": "application_fee",
            "description": "A fee in cents that will be applied to the order and transferred to the application owners Stripe account. To use an application fee, the request must be made on behalf of another account, using the Stripe-Account header or OAuth key. For more information, see the application fees documentation.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "customer",
            "description": "The ID of an existing customer that will be charged in this request.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "cvc",
            "description": "Card security code. Required unless your account is registered in Australia, Canada, or the United States. Highly recommended to always include this value.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "email",
            "description": "The email address of the customer placing the order. If a customer is    specified, that customers email address will be used.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "exp_year",
            "description": "Two or four digit number representing the cards expiration year.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to an order object. It can be useful for storing additional information about the order in a structured format.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Cardholders full name.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "number",
            "description": "The card number, as a string without any separators.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "object",
            "description": "The type of payment source. Should be card.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "order_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "source",
            "description": "A payment source to be charged, such as a credit card. If you also pass a customer ID, the source must be the ID of a source belonging to the customer. Otherwise, if you do not pass a customer ID, the source you provide must either be a token, like the ones returned by Stripe.js, or a dictionary containing a users credit card details, with the options described below. Although not all information is required, the extra info helps prevent fraud.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Orders"
        ],
        "security": []
      }
    },
    "/orders/": {
      "get": {
        "summary": "List all orders",
        "description": "Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.",
        "operationId": "list-orders",
        "parameters": [
          {
            "in": "query",
            "name": "created",
            "description": "A filter on the list based on the object created field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:",
            "type": "string"
          },
          {
            "in": "query",
            "name": "customer",
            "description": "Only return orders for the given customer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "fulfilled",
            "description": "A filter on the list based on the object fulfilled field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:",
            "type": "string"
          },
          {
            "in": "query",
            "name": "gte",
            "description": "Return values where the created field is after or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Only return orders with the given IDs",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lt",
            "description": "Return values where the created field is before this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lte",
            "description": "Return values where the created field is before or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "paid",
            "description": "A filter on the list based on the object paid field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:",
            "type": "string"
          },
          {
            "in": "query",
            "name": "returned",
            "description": "A filter on the list based on the object returned field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "status",
            "description": "Only return orders that have the given status. One of created, paid, fulfilled, or refunded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "status_transitions",
            "description": "Filter orders based on when they were paid, fulfilled, canceled, or returned",
            "type": "string"
          },
          {
            "in": "query",
            "name": "upstream_ids",
            "description": "Only return orders with the given upstream order IDs",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Orders"
        ],
        "security": []
      },
      "post": {
        "summary": "Creating a new order",
        "description": "Creates a new order object.n      ",
        "operationId": "create-order",
        "parameters": [
          {
            "in": "query",
            "name": "coupon",
            "description": "A coupon code that represents a discount to be applied to this order. Must be one-time duration and in same currency as the order.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "currency",
            "description": "3-letter ISO code representing the currency in which the order should be made. Stripe will validate that all entries in items match the currency specified here.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "customer",
            "description": "The ID of an existing customer to use for this order. If provided, the customer email and shipping address will be used to create the order. Subsequently, the customer will also be charged to pay the order. If email or shipping are also provided, they will override the values retrieved from the customer object.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "email",
            "description": "The email address of the customer placing the order.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "items",
            "description": "List of items constituting the order.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to an order object. It can be useful for storing additional information about the order in a structured format.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "parent",
            "description": "The ID of the SKU being ordered.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "quantity",
            "description": "The quantity of this order item. When type is sku, this is the number of instances of the SKU to be ordered.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "shipping",
            "description": "Shipping address for the order. Required if any of the SKUs are for products that have shippable set to true.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Orders"
        ],
        "security": []
      }
    },
    "/plans/{plan_id}/": {
      "delete": {
        "summary": "Delete a plan",
        "description": "You can delete plans via the plan management page of the Stripe dashboard. However, deleting a plan does not affect any current subscribers to the plan; it merely means that new subscribers canu2019t be added to that plan. You can also delete plans via the API.",
        "operationId": "delete-plan",
        "parameters": [
          {
            "in": "query",
            "name": "plan",
            "description": "The identifier of the plan to be deleted.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "plan_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Plans"
        ],
        "security": []
      },
      "post": {
        "summary": "Update a plan",
        "description": "Updates the name of a plan.  Other plan details (price, interval, etc.) are, by design, not editable.n      ",
        "operationId": "update-plan",
        "parameters": [
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a plan object. It can be useful for storing additional information about the plan in a structured format.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Name of the plan, to be displayed on invoices and in the web interface.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "plan",
            "description": "The identifier of the plan to be updated.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "plan_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "statement_descriptor",
            "description": "An arbitrary string to be displayed on your customeru2019s credit card statement. This may be up to 22 characters. As an example, if your website is RunClub and the item youu2019re charging for is your Silver Plan, you may want to specify a statement_descriptor of RunClub Silver Plan. The statement description may not include &lt;&gt; characters, and will appear on your customeru2019s statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Plans"
        ],
        "security": []
      }
    },
    "/plans/": {
      "get": {
        "summary": "List all plans",
        "description": "Returns a list of your plans.",
        "operationId": "list-plans",
        "parameters": [
          {
            "in": "query",
            "name": "created",
            "description": "A filter on the list based on the object created field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "gte",
            "description": "Return values where the created field is after or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lt",
            "description": "Return values where the created field is before this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lte",
            "description": "Return values where the created field is before or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Plans"
        ],
        "security": []
      },
      "post": {
        "summary": "Create a plan",
        "description": "You can create plans easily via the plan management page of the Stripe dashboard. Plan creation is also accessible via the API if you need to create plans on the fly.",
        "operationId": "create-plan",
        "parameters": [
          {
            "in": "query",
            "name": "amount",
            "description": "A positive integer in cents (or 0 for a free plan) representing how much to charge (on a recurring basis).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "currency",
            "description": "3-letter ISO code for currency.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "Unique string of your choice that will be used to identify this plan when subscribing a customer. This could be an identifier like u201cgoldu201d or a primary key from your own database.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "interval",
            "description": "Specifies billing frequency. Either day, week, month or year.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "interval_count",
            "description": "The number of intervals between each subscription billing. For example, interval=month and interval_count=3 bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a plan object. It can be useful for storing additional information about the plan in a structured format.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Name of the plan, to be displayed on invoices and in the web interface.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "statement_descriptor",
            "description": "An arbitrary string to be displayed on your customeru2019s credit card statement. This may be up to 22 characters. As an example, if your website is RunClub and the item youu2019re charging for is your Silver Plan, you may want to specify a statement_descriptor of RunClub Silver Plan. The statement description may not include &lt;&gt; characters, and will appear on your customeru2019s statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "trial_period_days",
            "description": "Specifies a trial period in (an integer number of) days. If you include a trial period, the customer wonu2019t be billed for the first time until the trial period ends. If the customer cancels before the trial period is over, sheu2019ll never be billed at all.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Plans"
        ],
        "security": []
      }
    },
    "/products/{product_id}": {
      "get": {
        "summary": "Retrieve a product",
        "description": "Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.",
        "operationId": "retrieve-product",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "The identifier of the product to be retrieved.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Products"
        ],
        "security": []
      }
    },
    "/products/{product_id}/": {
      "delete": {
        "summary": "Delete a product",
        "description": "Delete a product. Deleting a product is only possible if it has no SKUs associated with it.n      ",
        "operationId": "delete-product",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "The ID of the product to delete",
            "type": "string"
          },
          {
            "in": "path",
            "name": "product_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Products"
        ],
        "security": []
      },
      "post": {
        "summary": "Update a product",
        "description": "Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.n      ",
        "operationId": "update-product",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "description": "Whether or not the product is available for purchase. Setting this to false also deactivates any active, related SKUs. Setting this to true does not automatically activate any deactivated, related SKUs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "caption",
            "description": "A short one-line description of the product, meant to be displayable to the customer.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "deactivate_on",
            "description": "An array of Connect application names or identifiers that should not be able to order the SKUs for this product.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "description",
            "description": "The productu2019s description, meant to be displayable to the customer.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "images",
            "description": "A list of up to 8 URLs of images for this product, meant to be displayable to the customer.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "length",
            "description": "Length, in inches. Maximum precision is 2 decimal places.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "The productu2019s name, meant to be displayable to the customer.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "package_dimensions",
            "description": "The dimensions of this product for shipping purposes. A SKUn    associated with this product can override this value by having its own package_dimensions",
            "type": "string"
          },
          {
            "in": "path",
            "name": "product_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "shippable",
            "description": "Whether this product is shipped (i.e. physical goods). Defaults to true.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "url",
            "description": "A URL of a publicly-accessible webpage for this product.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "weight",
            "description": "Weight, in ounces. Maximum precision is 2 decimal places.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "width",
            "description": "Width, in inches. Maximum precision is 2 decimal places.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Products"
        ],
        "security": []
      }
    },
    "/products/": {
      "get": {
        "summary": "List all products",
        "description": "Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.",
        "operationId": "list-products",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "description": "Only return products that are active or inactive (e.g. pass false to list all inactive products).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Only return products with the given IDs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "shippable",
            "description": "Only return products that can be shipped (i.e., physical, not digital products).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "url",
            "description": "Only return products with the given url",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Products"
        ],
        "security": []
      },
      "post": {
        "summary": "Create a product",
        "description": "Creates a new product object.n      ",
        "operationId": "create-product",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "description": "Whether or not the product is currently available for purchase. Defaults to true.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "attributes",
            "description": "A list of up to 5 alphanumeric attributes that each SKU can provide values for (e.g. [color, size]).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "caption",
            "description": "A short one-line description of the product, meant to be displayable to the customer.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "deactivate_on",
            "description": "An array of Connect application names or identifiers that should not be able to order the SKUs for this product.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "description",
            "description": "The productu2019s description, meant to be displayable to the customer.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "The identifier for the product.  Must be unique.  If not provided, an identifier will be randomly generated.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "images",
            "description": "A list of up to 8 URLs of images for this product, meant to be displayable to the customer.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "length",
            "description": "Length, in inches. Maximum precision is 2 decimal places.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a productn    object. It can be useful for storing additional information about the productn    in a structured format.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "The productu2019s name, meant to be displayable to the customer.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "package_dimensions",
            "description": "The dimensions of this product for shipping purposes. A SKUn    associated with this product can override this value by having its own package_dimensions",
            "type": "string"
          },
          {
            "in": "query",
            "name": "shippable",
            "description": "Whether this product is shipped (i.e. physical goods). Defaults to true.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "url",
            "description": "A URL of a publicly-accessible webpage for this product.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "weight",
            "description": "Weight, in ounces. Maximum precision is 2 decimal places.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "width",
            "description": "Width, in inches. Maximum precision is 2 decimal places.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Products"
        ],
        "security": []
      }
    },
    "/recipients//recipient_id}/": {
      "get": {
        "summary": "Retrieve a recipient",
        "description": "Retrieves the details of an existing recipient. You need only supply the unique recipient identifier that was returned upon recipient creation.",
        "operationId": "retrieve-recipient",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "The identifier of the recipient to be retrieved.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Recipients"
        ],
        "security": []
      }
    },
    "/recipients/{recipient_id}/": {
      "delete": {
        "summary": "Delete a recipient",
        "description": "Permanently deletes a recipient. It cannot be undone.",
        "operationId": "delete-recipient",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "The identifier of the recipient to be deleted.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "recipient_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Recipients"
        ],
        "security": []
      },
      "post": {
        "summary": "Update a recipient",
        "description": "Updates the specified recipient by setting the values of the parameters passed. Any parameters not provided will be left unchanged.n      ",
        "operationId": "update-recipient",
        "parameters": [
          {
            "in": "query",
            "name": "bank_account",
            "description": "A bank account to attach to the recipient. You can provide either a token,    like the ones returned by Stripe.js,    or a dictionary containing a    users bank account details, with the options described below.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "card",
            "description": "A US Visa or MasterCard debit card thats not prepaid to attach to the recipient. You can provide either a token, like the ones returned by Stripe.js, or a dictionary containing a users debit card details, with the options described below. Passing card will create a new card, make it the new recipient default card, and delete the old recipient default if one exists. If you want to add additional debit cards instead of replacing the existing default, use the card creation API. Whenever you attach a card to a recipient, Stripe will automatically validate the debit card.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "country",
            "description": "The country the bank account is in. Currently, only US is supported.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "cvc",
            "description": "Card security code. Required unless your account is registered in Australia, Canada, or the United States. Highly recommended to always include this value.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "default_card",
            "description": "ID of card to make the recipientu2019s new default for transfers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "description",
            "description": "An arbitrary string which you can attach to a recipient object. It is displayed alongside the recipient in the web interface. This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "email",
            "description": "The recipients email address. It is displayed alongside the recipient in the web interface and can be useful for searching and tracking. This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "exp_year",
            "description": "Two or four digit number representing the cards expiration year.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a recipient object. It can be useful for storing additional information about the recipient in a structured format. You can unset individual keys if you POST an empty value for that key.  You can clear all keys if you POST an empty value for metadata.You can unset an individual key by setting its value to null and then saving.    To clear all keys, set metadata to null, then save.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Cardholders full name.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "number",
            "description": "The debit card number, as a string without any separators.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "recipient_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "routing_number",
            "description": "The routing number for the bank account in string form. This should be the ACH routing number, not the wire routing number.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tax_id",
            "description": "The recipients tax ID, as a string. For type individual, the full SSN; for type corporation, the full EIN.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Recipients"
        ],
        "security": []
      }
    },
    "/recipients/": {
      "get": {
        "summary": "List all recipients",
        "description": "Returns a list of your recipients. The recipients are returned sorted by creation date, with the most recently created recipients appearing first.",
        "operationId": "list-recipients",
        "parameters": [
          {
            "in": "query",
            "name": "created",
            "description": "A filter on the list based on the object created field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "gte",
            "description": "Return values where the created field is after or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lt",
            "description": "Return values where the created field is before this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lte",
            "description": "Return values where the created field is before or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "verified",
            "description": "Only return recipients that are verified or unverified.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Recipients"
        ],
        "security": []
      },
      "post": {
        "summary": "Create a recipient",
        "description": "Creates a new recipient object and verifies both the recipients identity and, if provided, the recipients bank account information or debit card.n      ",
        "operationId": "create-recipient",
        "parameters": [
          {
            "in": "query",
            "name": "account_number",
            "description": "The account number for the bank account in string form. Must be a checking account.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "bank_account",
            "description": "A bank account to attach to the recipient. You can provide either a token, like the ones returned by Stripe.js, or a dictionary containing a users bank account details, with the options described below.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "card",
            "description": "A US Visa or MasterCard debit card thats not prepaid to attach to the recipient. If the debit card is not valid, recipient creation will fail. You can provide either a token, like the ones returned by Stripe.js, or a dictionary containing a users debit card details, with the options described below. Although not all information is required, the extra info helps prevent fraud.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "cvc",
            "description": "Card security code. Required unless your account is registered in Australia, Canada, or the United States. Highly recommended to always include this value.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "description",
            "description": "An arbitrary string which you can attach to a recipient object. It is displayed alongside the recipient in the web interface.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "email",
            "description": "The recipients email address. It is displayed alongside the recipient in the web interface and can be useful for searching and tracking.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "exp_month",
            "description": "Two digit number representing the cards expiration month.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "exp_year",
            "description": "Two or four digit number representing the cards expiration year.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a recipient object. It can be useful for storing additional information about the recipient in a structured format.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "The recipients full, legal name. For type individual, should be in the format First Last, First Middle Last, or First M Last (no prefixes or suffixes). For corporation, the full incorporated name.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "routing_number",
            "description": "The routing number for the bank account in string form. This should be the ACH routing number, not the wire routing number.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "tax_id",
            "description": "The recipients tax ID, as a string. For type individual, the full SSN; for type corporation, the full EIN.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "type",
            "description": "Type of the recipient: either individual or corporation.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Recipients"
        ],
        "security": []
      }
    },
    "/refunds/{refund_id}/": {
      "post": {
        "summary": "Update a refund",
        "description": "Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.n      ",
        "operationId": "update-refund",
        "parameters": [
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a refund object. It can be useful for storing additional information about the refund in a structured format. You can unset individual keys if you POST an empty value for that key.  You can clear all keys if you POST an empty value for metadata.You can unset an individual key by setting its value to null and then saving.    To clear all keys, set metadata to null, then save.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "refund_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Refunds"
        ],
        "security": []
      }
    },
    "/refunds/": {
      "get": {
        "summary": "List all refunds",
        "description": "Returns a list of all refunds youu2019ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.",
        "operationId": "list-refunds",
        "parameters": [
          {
            "in": "query",
            "name": "charge",
            "description": "Only return refunds for the charge specified by this charge ID.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Refunds"
        ],
        "security": []
      }
    },
    "/skus/{sku_id}/": {
      "delete": {
        "summary": "Delete a SKU",
        "description": "Delete a SKU. Deleting a SKU is only possible until it has been used in an order.n      ",
        "operationId": "delete-sku",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "The identifier of the SKU to be deleted",
            "type": "string"
          },
          {
            "in": "path",
            "name": "sku_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "SKUs"
        ],
        "security": []
      },
      "post": {
        "summary": "Update a SKU",
        "description": "Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.n      ",
        "operationId": "update-sku",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "description": "Whether or not this SKU is available for purchase.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "currency",
            "description": "3-letter ISO code for currency.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "image",
            "description": "The URL of an image for this SKU, meant to be displayable to the customer.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "inventory",
            "description": "Description of the SKUu2019s inventory.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "length",
            "description": "Length, in inches. Maximum precision is 2 decimal places.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a SKU object. It can be useful for storing additional information about the SKU in a structured format.      This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "package_dimensions",
            "description": "The dimensions of this SKU for shipping purposes.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "price",
            "description": "The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 1 to charge u00a51, Japanese Yen being a 0-decimal currency).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "product",
            "description": "The ID of the product that this SKU should belong to. The product must exist and have the same set of attribute names as the SKUu2019s current product.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "sku_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "type",
            "description": "Inventory type.  Possible values are finite, bucket (not quantified), and infinite.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "value",
            "description": "An indicator of the inventory available. Possible values are in_stock, limited, and out_of_stock. Will be present if and only if type is bucket.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "weight",
            "description": "Weight, in ounces. Maximum precision is 2 decimal places.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "width",
            "description": "Width, in inches. Maximum precision is 2 decimal places.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "SKUs"
        ],
        "security": []
      }
    },
    "/skus/": {
      "get": {
        "summary": "List all SKUs",
        "description": "Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.",
        "operationId": "list-skus",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "description": "Only return SKUs that are active or inactive (e.g. pass false to list all inactive products).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "attributes",
            "description": "Only return SKUs that have the specified key/value pairs in this partially constructed dictionary. Can be specified only if product is also supplied. For instance, if the associated product has attributes [color, size], passing in attributes[color]=red returns all the SKUs for this product that have color set to red.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Only return SKUs with the given IDs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "in_stock",
            "description": "Only return SKUs that are either in stock or out of stock (e.g. pass false to list all SKUs that are out of stock). If no value is provided, all SKUs are returned.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "product",
            "description": "The ID of the product whose SKUs will be retrieved.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "SKUs"
        ],
        "security": []
      },
      "post": {
        "summary": "Create a SKU",
        "description": "Creates a new SKU associated with a product.n      ",
        "operationId": "create-sku",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "description": "Whether or not the SKU is available for purchase. Default to true.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "attributes",
            "description": "A dictionary of attributes and values for the attributes defined by the product. If, for example, a productu2019s attributes are [size, gender], a valid SKU has the following dictionary of attributes: {size: Medium, gender: Unisex}.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "currency",
            "description": "3-letter ISO code for currency.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "The identifier for the SKU.  Must be unique.  If not provided, an identifier will be randomly generated.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "image",
            "description": "The URL of an image for this SKU, meant to be displayable to the customer.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "inventory",
            "description": "Description of the SKUu2019s inventory.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "length",
            "description": "Length, in inches. Maximum precision is 2 decimal places.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a SKUn    object. It can be useful for storing additional information about the SKUn    in a structured format.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "package_dimensions",
            "description": "The dimensions of this SKU for shipping purposes.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "price",
            "description": "The cost of the item as a nonnegative integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 1 to charge u00a51, Japanese Yen being a 0-decimal currency).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "product",
            "description": "The ID of the product this SKU is associated with.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "quantity",
            "description": "The count of inventory available.  Required if type is finite.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "value",
            "description": "An indicator of the inventory available. Possible values are in_stock, limited, and out_of_stock. Will be present if and only if type is bucket.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "weight",
            "description": "Weight, in ounces. Maximum precision is 2 decimal places.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "width",
            "description": "Width, in inches. Maximum precision is 2 decimal places.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "SKUs"
        ],
        "security": []
      }
    },
    "/tokens/{token_id}/": {
      "get": {
        "summary": "Retrieve a token",
        "description": "Retrieves the token with the given ID.n      ",
        "operationId": "retrieve-token",
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "description": "The ID of the desired token.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "token_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Tokens"
        ],
        "security": []
      }
    },
    "/tokens/": {
      "post": {
        "summary": "Create a card token",
        "description": "Creates a single use token that wraps the details of a credit card. This token can be used in place of a credit card dictionary with any API method. These tokens can only be used once: by creating a new charge object, or attaching them to a customer.n      ",
        "operationId": "create-card-token",
        "parameters": [
          {
            "in": "query",
            "name": "account_holder_name",
            "description": "The name of the person or business that owns the bank account. This field is required when attaching the bank account to a customer object.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "bank_account",
            "description": "The bank account this token will represent.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "card",
            "description": "The card this token will represent. If you also pass in a customer, the card must be the ID of a card belonging to the customer. Otherwise, if you do not pass a customer, a dictionary containing a users credit card details, with the options described below.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "country",
            "description": "The country the bank account is in.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "currency",
            "description": "Required to be able to add the card to an account (in all other cases, this          parameter is not used). When added to an account, the card (which must be a          debit card) can be used as a transfer destination for funds in this currency.          Currently, the only supported currency for debit card transfers is          usd.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "customer",
            "description": "The customer (owned by the applications account) to create a token for. For use with Stripe Connect only; this can only be used with an OAuth access token or Stripe-Account header. For more details, see the shared customers documentation.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "cvc",
            "description": "Card security code. Required unless your account is registered in Australia, Canada, or the United States. Highly recommended to always include this value.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "exp_year",
            "description": "Two or four digit number representing the cards expiration year.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Cardholders full name.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "number",
            "description": "The card number, as a string without any separators.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "pii",
            "description": "The PII this token will represent.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "routing_number",
            "description": "The routing number, sort code, or other country-appropriate institution number for the bank account.          For US bank accounts, this is required and should be the ACH routing number, not the wire routing number.          If you are providing an IBAN for account_number, this field is not required.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Tokens"
        ],
        "security": []
      }
    },
    "/transfers/{transfer_id}/reversals/{reveral_id}/": {
      "get": {
        "summary": "Retrieve a reversal",
        "description": "By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.n      ",
        "operationId": "retrieve-transfer-reversal",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "ID of reversal to retrieve.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "transfer",
            "description": "ID of the transfer reversed.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Transfers"
        ],
        "security": []
      },
      "post": {
        "summary": "Update a reversal",
        "description": "Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.n      ",
        "operationId": "update-transfer-reversal",
        "parameters": [
          {
            "in": "query",
            "name": "description",
            "description": "An arbitrary string which you can attach to a reversal    object. It is displayed when in the web interface    alongside the reversal.    This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a reversal object. It can be useful for storing additional information about the reversal in a structured format. You can unset individual keys if you POST an empty value for that key.  You can clear all keys if you POST an empty value for metadata.You can unset an individual key by setting its value to null and then saving.    To clear all keys, set metadata to null, then save.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "reversal_id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "transfer_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Transfers"
        ],
        "security": []
      }
    },
    "/transfers/{transfer_id}/reversals/": {
      "get": {
        "summary": "List all reversals",
        "description": "You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the limit and starting_after parameters to page through additional reversals.",
        "operationId": "list-transfer-reversals",
        "parameters": [
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "The ID of the transfer whose reversals will be retrieved.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "transfer_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Transfers"
        ],
        "security": []
      },
      "post": {
        "summary": "Create a transfer reversal",
        "description": "When you create a new reversal, you must specify a transfer to create it on.n      ",
        "operationId": "create-transfer-reversal",
        "parameters": [
          {
            "in": "query",
            "name": "amount",
            "description": "A positive integer in cents    representing how much of this transfer to reverse. Can only reverse up to the    unreversed amount remaining of the transfer.  Partial transfer reversals are only    allowed for transfers to Stripe Accounts.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "description",
            "description": "An arbitrary string which you can attach to a reversal object. It is displayed alongside the reversal in the dashboard. This will be unset if you POST an empty value.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "The identifier of the transfer to be reversed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a reversal object. It can be useful for storing additional information about the reversal in a structured format. You can unset individual keys if you POST an empty value for that key.  You can clear all keys if you POST an empty value for metadata.You can unset an individual key by setting its value to null and then saving.    To clear all keys, set metadata to null, then save.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "refund_application_fee",
            "description": "Boolean indicating whether the application fee should be refunded when reversing this    transfer. If a full transfer reversal is given, the full application fee will be    refunded.  Otherwise, the application fee will be refunded with an amount proportional    to the amount of the transfer reversed.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "transfer_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Transfers"
        ],
        "security": []
      }
    },
    "/transfers/{transfer_id}/": {
      "post": {
        "summary": "Update a transfer",
        "description": "Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.n      ",
        "operationId": "update-transfer",
        "parameters": [
          {
            "in": "query",
            "name": "description",
            "description": "An arbitrary string which you can attach to a transfer object. It is displayed when in the web interface alongside the transfer. This will be unset if you POST an empty value.This can be unset by updating the value to null and then saving.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a transfer object. It can be useful for storing additional information about the transfer in a structured format. You can unset individual keys if you POST an empty value for that key.  You can clear all keys if you POST an empty value for metadata.You can unset an individual key by setting its value to null and then saving.    To clear all keys, set metadata to null, then save.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "transfer_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Transfers"
        ],
        "security": []
      }
    },
    "/transfers/": {
      "get": {
        "summary": "List all transfers",
        "description": "Returns a list of existing transfers sent to third-party bank accounts or that Stripe has sent you. The transfers are returned in sorted order, with the most recently created transfers appearing first.",
        "operationId": "list-transfers",
        "parameters": [
          {
            "in": "query",
            "name": "created",
            "description": "A filter on the list based on the object created field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:",
            "type": "string"
          },
          {
            "in": "query",
            "name": "date",
            "description": "A filter on the list based on the object date field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:",
            "type": "string"
          },
          {
            "in": "query",
            "name": "destination",
            "description": "Only return transfers for the destination specified by this account ID.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "gte",
            "description": "Return values where the created field is after or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lt",
            "description": "Return values where the created field is before this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lte",
            "description": "Return values where the created field is before or equal to this timestamp.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "recipient",
            "description": "Only return transfers for the recipient specified by this recipient ID.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "status",
            "description": "Only return transfers that have the given status: pending, paid, failed, in_transit, or canceled.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Transfers"
        ],
        "security": []
      },
      "post": {
        "summary": "Create a transfer",
        "description": "To send funds from your Stripe account to a third-party recipient or to your own bank account, you create a new transfer object. Your Stripe balance must be able to cover the transfer amount, or youll receive an Insufficient Funds error.n      ",
        "operationId": "create-transfer",
        "parameters": [
          {
            "in": "query",
            "name": "amount",
            "description": "A positive integer in cents representing how much to transfer.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "currency",
            "description": "3-letter ISO code for currency.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "description",
            "description": "An arbitrary string which you can attach to a transfer object. It is displayed when in the web interface alongside the transfer.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "destination",
            "description": "The id of a bank account or a card to send the transfer to, or the string default_for_currency to use the default external account for the specified currency.    If you use Stripe Connect, this can be the the id of a connected Stripe account; see the details    about when such transfers are permitted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "metadata",
            "description": "A set of key/value pairs that you can attach to a transfer object. It can be useful for storing additional information about the transfer in a structured format.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "source_transaction",
            "description": "You can use this parameter to transfer funds from a charge (or other transaction) before they are added to your available balance.    A pending balance will transfer immediately but the funds will not become available until the original charge becomes available.    See the Connect documentation for details.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "source_type",
            "description": "The source balance to draw this transfer from. Balances for different payment sources are kept separately. You can find the amounts with the balances API. Valid options are:  alipay_account, bank_account, bitcoin_receiver, and card.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "statement_descriptor",
            "description": "A string to be displayed on the recipients bank or card statement. This may be at most 22 characters. Attempting to use a statement_descriptor longer than 22 characters will return an error. Note: Most banks will truncate this information and/or display it inconsistently. Some may not display it at all.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Transfers"
        ],
        "security": []
      }
    }
  },
  "definitions": []
}
